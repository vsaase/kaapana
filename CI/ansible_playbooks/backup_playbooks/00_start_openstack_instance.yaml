---
- name: launch a compute instance
  hosts: localhost
  gather_facts: false
  vars_prompt:
    - name: username
      default: "jip-ci-kaapana"
      private: no
      prompt: "OpenStack username?"

    - name: password
      prompt: "OpenStack password?"
      default: ""
      private: yes

    - name: instance_name
      prompt: "OpenStack instance name?"
      default: "kaapana-instance"
      private: no

    - name: volume_size
      prompt: "OpenStack volume size [gb]?"
      default: "90"
      private: no

    - name: os
      prompt: "Which image should be used?"
      default: "centos8"
      private: no

    - name: instance_flavor
      prompt: "OpenStack flavor?"
      default: "dkfz-8.16"
      private: no

  vars:
    ssh_key: kaapana
    project_name: E230-DKTK-JIP

  environment:
    OS_IDENTITY_API_VERSION: 2
    OS_ENDPOINT_TYPE: publicURL

  tasks:

    - name: Set Custom Instance Image
      set_fact:
        instance_image: "{{ os }}"
    # fail: msg="{{ os }} not suppored! [centos7 centos8 ubuntu]"
      when: 
      - os |lower != "centos7"
      - os |lower != "centos8"
      - os |lower != "ubuntu"

    - fail: msg="{{ project_name }} this project is not supported! [E230-DKTK-JIP E230-KAAPANA-CI E130-OP41 E230-Production]"
      when: 
      - project_name != "E230-DKTK-JIP"
      - project_name != "E230-KAAPANA-CI"
      - project_name != "E130-OP41"
      - project_name != "E230-Production"

    - name: Set CentOs7 as image
      set_fact:
        instance_image: CentOS-7.8-DKFZ
      when: os |lower == "centos7"

    - name: Set CentOs8 as image
      set_fact:
        instance_image: CentOS-8.2-DKFZ
      when: os |lower == "centos8"

    - name: Set Ubuntu as image
      set_fact:
        # instance_image: ubuntu-sever-18.04-vanilla
        # instance_image: Ubuntu-18.04-LTS
        # instance_image: Ubuntu-18.04-LTS-DKFZ
        instance_image: Ubuntu-20.04-LTS-DKFZ
      when: os |lower == "ubuntu"

    - name: Set E230-DKTK-JIP os_project_id
      set_fact:
        os_project_id: 969831bf53424f1fb318a9c1d98e1941
      when: project_name == "E230-DKTK-JIP"

    - name: Set E230-KAAPANA-CI os_project_id
      set_fact:
        os_project_id: 4a42bd361cbe4ccb851ee857abaa3589
      when: project_name == "E230-KAAPANA-CI"

    - name: Set E130-OP41 os_project_id
      set_fact:
        os_project_id: 37512a3a49fc4ccbb811a518b501997a
      when: project_name == "E130-OP41"

    - name: Set E230-Production os_project_id
      set_fact:
        os_project_id: 8c5c6d678a4e4a01b9d8794262e6b85d
      when: project_name == "E230-Production"
    
    - name: Get password from env...
      set_fact:
        password: "{{ lookup('env','CI_PASSWORD') or password }}"
      when: username == "jip-ci-kaapana"

    - name: check ssh_key_file present
      stat: 
        path: "~/.ssh/{{ ssh_key }}.pem"
      register: ssh_key_file

    - name: check ssh_key_file
      fail: msg="The ssh-key ~/.ssh/{{ ssh_key }}.pem must be present on the host!"
      when: not ssh_key_file.stat.exists

    - name: launch an instance
      environment:
        OS_TENANT_ID: "{{ os_project_id }}"
      os_server:
        state: present
        auth:
          auth_url: "https://cloud.dkfz-heidelberg.de:13000"
          username: "{{ username }}"
          password: "{{ password }}"
          user_domain_name: "AD"
          project_name: "{{ project_name }}"
        name: "{{ instance_name }}"
        image: "{{ instance_image }}"
        volume_size: "{{ volume_size }}"
        flavor: "{{ instance_flavor }}"
        key_name: "{{ ssh_key }}"
        region_name: regionOne
        terminate_volume: True
        boot_from_volume: True
        security_groups: default
        auto_ip: yes
        wait: yes
        timeout: 120
        meta:
          hostname: new_instance.localdomain
      register: new_instance
    
    - name: Reset fingerprint
      command: ssh-keygen -R {{ new_instance.openstack.accessIPv4 }}
      ignore_errors: yes

    - name: Wait for SSH on the Instance
      command: "ssh -oBatchMode=yes -oStrictHostKeyChecking=no -i ~/.ssh/{{ ssh_key }}.pem root@{{ new_instance.openstack.accessIPv4 }} true"
      register: result
      until: result.rc == 0
      retries: 6
      delay: 10

    # - name: Add Instance to Inventory
    #   add_host: name=new_instance
    #     groups=os_servers
    #     ansible_ssh_host={{ new_instance.openstack.accessIPv4 }}
    - name: replace ip
      replace:
        path: "{{ item }}"
        regexp: 'default: "\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b'
        replace: "default: \"{{ new_instance.openstack.accessIPv4 }}"
      loop:
      - ./01_install_server_deploy_platform.yaml
      - ./02_delete_deployment.yaml
      - ./03_purge_filesystem.yaml
      delegate_to: 127.0.0.1
      ignore_errors: yes

    - name: RESULT
      debug:
        msg: "OPENSTACK INSTANCE CREATED SUCCESSFULLY"

    - name: RETURN
      debug:
        msg: "{{ new_instance.openstack.accessIPv4 }}"
