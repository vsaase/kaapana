---
- hosts: localhost
  gather_facts: no
  vars_prompt:
    - name: target_host
      prompt: please enter the target host IP
      default: "10.128.129.79"
      private: no

  tasks:
    - add_host:
        name: "{{ target_host }}"
        groups: os_server

- name: Deploy platform
  hosts: os_server
  strategy: free
  remote_user: root

  vars_prompt:
    - name: "registry_username"
      prompt: "Harbor registry username: "
      default: "jip-ci-kaapana"
      private: no

    - name: "registry_password"
      prompt: "Registry password: "
      private: yes

    - name: "project_config"
      prompt: "Which project configuration should be used?"
      default: "jip_dev.yaml"
      private: no

  vars:
    KAAPANA_HOME: "../../"
    doc_install_test: "false"
    last_release_version: "1.1"

  vars_files:
    - "{{ KAAPANA_HOME }}/CI/ansible_playbooks/project_configs/{{ project_config }}"

  tasks:
    - name: Get password from env...
      set_fact:
        registry_password: "{{ lookup('env','CI_PASSWORD') or registry_password }}"
      when: registry_username == "jip-ci-kaapana" and registry_password | length == 0

    - import_tasks: "{{ KAAPANA_HOME }}/CI/ansible_playbooks/task_templates/server_init_checks.yaml"
    - import_tasks: "{{ KAAPANA_HOME }}/CI/ansible_playbooks/task_templates/check_harbor.yaml"
    - import_tasks: "{{ KAAPANA_HOME }}/CI/ansible_playbooks/task_templates/set_hostname_fact.yaml"

    - name: Helm repo update
      command: helm repo update
      ignore_errors: no

    - name: Delete existing Helm deployments
      block:
        - name: check Helm deployments
          command: helm ls
          register: deployments

        # - name: print deployments
        #   debug:
        #     msg: "{{ deployments.stdout }}"

        - name: LIST HELM DEPLOYMENTS
          debug:
            msg: "DEPLOYED: {{ item.split('\t')[0] }}"
          with_items: "{{ deployments.stdout.split('\n')[1:] }}"

        - name: Delete existing deployments
          command: "helm del {{ item.split('\t')[0] }}"
          with_items: "{{ deployments.stdout.split('\n')[1:] }}"

        - name: Wait until namespaces are removed
          shell: /bin/bash -i -c "kubectl get namespaces | grep -E --line-buffered 'flow-jobs|flow|base|monitoring|store' | cut -d' ' -f1"
          register: deployment_removed
          until: deployment_removed.stdout == '' and deployment_removed.stderr == ''
          failed_when: deployment_removed.stdout != '' and deployment_removed.stderr != ''
          retries: 50
          delay: 3

        - name: Wait until all pods are terminated
          shell: /bin/bash -i -c "kubectl get pods --all-namespaces | grep -E --line-buffered 'Terminating' | cut -d' ' -f1"
          register: deployment_terminated
          until: deployment_terminated.stdout == '' and deployment_terminated.stderr == ''
          failed_when: deployment_terminated.stdout != '' and deployment_terminated.stderr != ''
          retries: 50
          delay: 3

      rescue:
        - name: Get all remaining pods
          shell: /bin/bash -i -c "kubectl get pods --all-namespaces"
          register: pods_left
        - debug:
            msg: "Existing deployments: {{ deployments.stdout }}"
        - debug:
            msg: "Remaining pods: {{ pods_left.stdout }}"
        - fail:
            msg: "Removing existing deployments failed!"

    - name: Deploy with docs jip_installer.sh
      block:
        - name: Download jip_installer.sh script from docs server
          get_url:
            url: https://jip.dktk.dkfz.de/42fef1/jip_installer.sh
            dest: "{{ lookup('env','HOME') }}/jip_installer.sh"
            force: yes
          delegate_to: 127.0.0.1

        - name: Deploy platform with jip_installer.sh
          script: "{{ lookup('env','HOME') }}/jip_installer.sh --mode install-chart --version {{ last_release_version }} --quiet --username {{ registry_username }} --password {{ registry_password }}"
          ignore_errors: no
      when: doc_install_test|bool

    - name: Installation-Info
      debug:
        msg: '{"Chart": "{{ chart_repo }}/{{ project_name }}","release": "{{ release_version }}","Hostname": "{{ system_hostname }}"}'

    - name: Install project chart
      command: helm install --devel --version {{ release_version }} {{ chart_repo }}/{{ project_name }} --set global.dicom_port="{{ dicom_port }}" --set global.https_port="{{ https_port }}" --set global.http_port="{{ http_port }}" --set global.hostname="{{ system_hostname }}" --set global.credentials.registry_username="{{ registry_username }}" --set global.credentials.registry_password="{{ registry_password }}" --set global.fast_data_dir="{{ fast_data_dir }}" --set global.slow_data_dir="{{ slow_data_dir }}" --set global.gpu_support={{ gpu_support }} --set global.pull_policy_pods="{{ pull_policy_pods }}" --set global.pull_policy_jobs="{{ pull_policy_jobs }}" --set global.pull_policy_operators="{{ pull_policy_operators }}" --set global.dev_mode="{{ dev_mode }}" --set global.dev_ports="{{ dev_ports }}" --name-template {{ project_name }}
      ignore_errors: no
      no_log: True
      when: not doc_install_test|bool

    - import_tasks: "{{ KAAPANA_HOME }}/CI/ansible_playbooks/task_templates/tests.yaml"

    - name: RESULT
      debug:
        msg: "PLATFORM DEPLOYED SUCCESSFULLY"

    - name: RETURN
      debug:
        msg: "OK"
